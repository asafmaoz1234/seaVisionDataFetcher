name: Deploy to lambda

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  push:
    branches:
      - main

jobs:
  merged_to_main:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    services:
      db_test:
        image: postgres:alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: metrics-data
          POSTGRES_PASSWORD: compose-postgres
      sqs_test:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
          - 4571:4571
        environment:
          - SERVICES=sqs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: Package to jar
        run: mvn clean package

      - name: List files in target directory
        run: ls -l /home/runner/work/seaVisionDataFetcher/seaVisionDataFetcher/target/

      - name: List files S3 bucket
        run: aws s3 ls s3://seavisiondatafetcher
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Upload aws Build Artifact to S3
        run: |
          aws s3 cp /home/runner/work/seaVisionDataFetcher/seaVisionDataFetcher/target/seaVisionDataFetcher-0.0.1-SNAPSHOT-aws.jar s3://seavisiondatafetcher
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Update AWS Lambda function to use the uploaded JAR
        run: |
          aws lambda update-function-code --function-name seaVisionDataFetcher --s3-bucket seavisiondatafetcher --s3-key seaVisionDataFetcher-0.0.1-SNAPSHOT-aws.jar
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          API_AUTH_KEY: ${{ secrets.API_AUTH_KEY }}
          API_REQUEST_PARAMS: ${{ secrets.API_REQUEST_PARAMS }}
          API_REQUEST_SOURCE: ${{ secrets.API_REQUEST_SOURCE }}
          WEATHER_API_BASE_URL: ${{ secrets.WEATHER_API_BASE_URL }}
